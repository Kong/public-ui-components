import { PluginGroup, PluginScope } from './types'

export const PLUGIN_GROUP_AND_SCOPE_MAP = {
  'basic-auth': {
    name: 'Basic Authentication',
    description: 'Add Basic Authentication to your Services',
    group: PluginGroup.AUTHENTICATION,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE],
  },
  'hmac-auth': {
    name: 'HMAC Authentication',
    description: 'Add HMAC Authentication to your Services',
    group: PluginGroup.AUTHENTICATION,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE],
  },
  'jwt-signer': {
    name: 'JWT Signer',
    description: 'Verify and (re-)sign one or two tokens in a request',
    group: PluginGroup.AUTHENTICATION,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE],
  },
  jwt: {
    name: 'JWT',
    description: 'Verify and authenticate JSON Web Tokens',
    group: PluginGroup.AUTHENTICATION,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE],
  },
  'key-auth': {
    name: 'Key Authentication',
    description: 'Add key authentication to your Services',
    group: PluginGroup.AUTHENTICATION,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE],
  },
  'key-auth-enc': {
    name: 'Key Authentication Encrypted',
    description: 'Add key authentication to your Services with an encrypted token',
    group: PluginGroup.AUTHENTICATION,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE],
  },
  'ldap-auth-advanced': {
    name: 'LDAP Authentication Advanced',
    description: 'Integrate Kong with a LDAP server',
    group: PluginGroup.AUTHENTICATION,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE],
  },
  'ldap-auth': {
    name: 'LDAP Authentication',
    description: 'Integrate Kong with a LDAP server',
    group: PluginGroup.AUTHENTICATION,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE],
  },
  'oauth2-introspection': {
    name: 'OAuth 2.0 Introspection',
    description: 'Integrate Kong with a third-party OAuth 2.0 Authorization Server',
    group: PluginGroup.AUTHENTICATION,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE],
  },
  oauth2: {
    name: 'OAuth 2.0 Authentication',
    description: 'Add OAuth 2.0 authentication to your Services',
    group: PluginGroup.AUTHENTICATION,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE],
  },
  'openid-connect': {
    name: 'OpenID Connect',
    description: 'Integrate Kong with a third-party OpenID Connect 1.0 Provider',
    group: PluginGroup.AUTHENTICATION,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE],
  },
  'mtls-auth': {
    name: 'Mutual TLS Authentication',
    description: 'Secure routes and services with client certificate and mutual TLS authentication',
    group: PluginGroup.AUTHENTICATION,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE],
  },
  'vault-auth': {
    name: 'Vault Authentication',
    description: 'Secure routes and services with an access token and secret token, stored securely via Vault',
    group: PluginGroup.AUTHENTICATION,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE],
  },
  'bot-detection': {
    name: 'Bot Detection',
    description: 'Detect and clock bots or custom clients',
    group: PluginGroup.SECURITY,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE],
  },
  cors: {
    name: 'CORS',
    description: 'Allow developers to make requests from the browser',
    group: PluginGroup.SECURITY,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE],
  },
  'ip-restriction': {
    name: 'IP Restriction',
    description: 'Whitelist or blacklist IPs that can make requests',
    group: PluginGroup.SECURITY,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE, PluginScope.CONSUMER, PluginScope.CONSUMER_GROUP],
  },
  opa: {
    name: 'OPA',
    description: 'Authorize requests against Open Policy Agent',
    group: PluginGroup.SECURITY,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE],
  },
  'kubernetes-sidecar-injector': {
    name: 'Kubernetes Sidecar Injector',
    description: 'This plugin will inject Kong dataplane nodes and form a service mesh on top of Kubernetes',
    group: PluginGroup.DEPLOYMENT,
    scope: [PluginScope.GLOBAL],
  },
  'request-validator': {
    name: 'Request Validator',
    description: 'Validate requests before they reach their upstream Service.',
    group: PluginGroup.TRAFFIC_CONTROL,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE, PluginScope.CONSUMER],
  },
  acl: {
    name: 'ACL',
    description: 'Control which consumers can access Services',
    group: PluginGroup.TRAFFIC_CONTROL,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE],
  },
  canary: {
    name: 'Canary Release',
    description: 'Methodically roll out software changes to a subset of users',
    group: PluginGroup.TRAFFIC_CONTROL,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE],
  },
  'forward-proxy': {
    name: 'Forward Proxy',
    description: 'Allow Kong to connect to intermediary transparent HTTP proxies',
    group: PluginGroup.TRAFFIC_CONTROL,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE, PluginScope.CONSUMER],
  },
  'proxy-cache': {
    name: 'Proxy Caching',
    description: 'Cache and serve commonly requested responses in Kong',
    group: PluginGroup.TRAFFIC_CONTROL,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE, PluginScope.CONSUMER, PluginScope.CONSUMER_GROUP],
  },
  'proxy-cache-advanced': {
    name: 'Proxy Caching Advanced',
    description: 'Cache and serve commonly requested responses in Kong',
    group: PluginGroup.TRAFFIC_CONTROL,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE, PluginScope.CONSUMER, PluginScope.CONSUMER_GROUP],
  },
  'graphql-proxy-cache-advanced': {
    name: 'GraphQL Proxy Caching Advanced',
    description: 'Cache and serve commonly requested responses in Kong',
    group: PluginGroup.TRAFFIC_CONTROL,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE, PluginScope.CONSUMER],
  },
  'rate-limiting-advanced': {
    name: 'Rate Limiting Advanced',
    description: 'Rate-limit how many HTTP requests a developer can make',
    group: PluginGroup.TRAFFIC_CONTROL,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE, PluginScope.CONSUMER, PluginScope.CONSUMER_GROUP],
  },
  'rate-limiting': {
    name: 'Rate Limiting',
    description: 'Rate-limit how many HTTP requests a developer can make',
    group: PluginGroup.TRAFFIC_CONTROL,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE, PluginScope.CONSUMER, PluginScope.CONSUMER_GROUP],
  },
  'graphql-rate-limiting-advanced': {
    name: 'GraphQL Rate Limiting Advanced',
    description: 'Rate-limit how many HTTP requests a developer can make',
    group: PluginGroup.TRAFFIC_CONTROL,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE, PluginScope.CONSUMER],
  },
  mocking: {
    name: 'Mocking',
    description: 'Provide mock endpoints to test your APIs in development against your services',
    group: PluginGroup.TRAFFIC_CONTROL,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE, PluginScope.CONSUMER],
  },
  'request-size-limiting': {
    name: 'Request Size Limiting',
    description: 'Block requests with bodies greater than a specific size',
    group: PluginGroup.TRAFFIC_CONTROL,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE, PluginScope.CONSUMER],
  },
  'request-termination': {
    name: 'Request Termination',
    description: 'Terminate all requests with a specific response',
    group: PluginGroup.TRAFFIC_CONTROL,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE, PluginScope.CONSUMER, PluginScope.CONSUMER_GROUP],
  },
  'response-ratelimiting': {
    name: 'Response Rate Limiting',
    description: 'Rate-Limiting based on a custom response header value',
    group: PluginGroup.TRAFFIC_CONTROL,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE, PluginScope.CONSUMER],
  },
  'route-by-header': {
    name: 'Route by Header',
    description: 'Route requests based on request headers',
    group: PluginGroup.TRAFFIC_CONTROL,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE, PluginScope.CONSUMER],
  },
  'ai-proxy': {
    name: 'AI Proxy',
    description: 'Directly call a configured LLM, with mediated security and tuning parameters, and using standardised Kong request and response formats.',
    group: PluginGroup.AI,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE, PluginScope.CONSUMER, PluginScope.CONSUMER_GROUP],
  },
  'ai-prompt-decorator': {
    name: 'AI Prompt Decorator',
    description: 'Prepend and append chat prompts to AI Proxy plugin LLM requests.',
    group: PluginGroup.AI,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE, PluginScope.CONSUMER, PluginScope.CONSUMER_GROUP],
  },
  'ai-prompt-template': {
    name: 'AI Prompt Template',
    description: 'Define a set of templates, containing string variable placeholders, that can be consumed by users when used with the AI Proxy plugin.',
    group: PluginGroup.AI,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE, PluginScope.CONSUMER, PluginScope.CONSUMER_GROUP],
  },
  'ai-prompt-guard': {
    name: 'AI Prompt Guard',
    description: 'Define a set of valid, and a set of invalid, regular expression patterns when calling LLM models with the AI Proxy plugin.',
    group: PluginGroup.AI,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE, PluginScope.CONSUMER, PluginScope.CONSUMER_GROUP],
  },
  'ai-request-transformer': {
    name: 'AI Request Transformer',
    description: 'Use an LLM to transform API request from a user, before sending to the upstream service.',
    group: PluginGroup.AI,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE],
  },
  'ai-response-transformer': {
    name: 'AI Response Transformer',
    description: 'Use an LLM to transform API responses from the upstream service, before returning to the user.',
    group: PluginGroup.AI,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE, PluginScope.CONSUMER, PluginScope.CONSUMER_GROUP],
  },
  'ai-rate-limiting-advanced': {
    name: 'AI Rate Limiting Advanced',
    description: 'Provides rate limiting for the providers used by any AI plugins.',
    group: PluginGroup.AI,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE, PluginScope.CONSUMER, PluginScope.CONSUMER_GROUP],
  },
  'ai-azure-content-safety': {
    name: 'AI Azure Content Safety',
    description: 'Allows checking and auditing of AI-Proxy plugin messages, using Azure Cognitive Services, before proxying to upstream large-language model.',
    group: PluginGroup.AI,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE],
  },
  'aws-lambda': {
    name: 'AWS Lambda',
    description: 'Invoke and manage AWS Lambda functions from Kong',
    group: PluginGroup.SERVERLESS,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE, PluginScope.CONSUMER],
  },
  'azure-functions': {
    name: 'Azure Functions',
    description: 'Invoke Azure functions',
    group: PluginGroup.SERVERLESS,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE, PluginScope.CONSUMER],
  },
  openwhisk: {
    name: 'OpenWhisk',
    description: 'Invoke and manage OpenWhisk actions from Kong',
    group: PluginGroup.SERVERLESS,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE, PluginScope.CONSUMER],
  },
  'pre-function': {
    name: 'Kong Functions (Pre-Plugins)',
    description: 'Add and manage custom lua functions to run before other plugins',
    group: PluginGroup.SERVERLESS,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE],
  },
  'post-function': {
    name: 'Kong Functions (Post-Plugins)',
    description: 'Add and manage custom lua functions to run after other plugins',
    group: PluginGroup.SERVERLESS,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE],
  },
  datadog: {
    name: 'Datadog',
    description: 'Visualize metrics on Datadog',
    group: PluginGroup.ANALYTICS_AND_MONITORING,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE, PluginScope.CONSUMER],
  },
  prometheus: {
    name: 'Prometheus',
    description: 'Export performance metrics to Prometheus',
    group: PluginGroup.ANALYTICS_AND_MONITORING,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE, PluginScope.CONSUMER],
  },
  zipkin: {
    name: 'Zipkin',
    description: 'Propagate zipkin spans and report spans to a zipkin server',
    group: PluginGroup.ANALYTICS_AND_MONITORING,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE, PluginScope.CONSUMER],
  },
  collector: {
    name: 'Collector',
    description: 'Automate spec-driven development & anomaly detection (Early Access)',
    group: PluginGroup.ANALYTICS_AND_MONITORING,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE],
  },
  'response-transformer-advanced': {
    name: 'Response Transformer Advanced',
    description: 'Transform the response sent by the upstream server on the fly on Kong, before returning the response to the client.',
    group: PluginGroup.TRANSFORMATIONS,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE, PluginScope.CONSUMER, PluginScope.CONSUMER_GROUP],
  },
  'correlation-id': {
    name: 'Correlation ID',
    description: 'Correlate requests and responses using a unique ID',
    group: PluginGroup.TRANSFORMATIONS,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE, PluginScope.CONSUMER],
  },
  'request-transformer-advanced': {
    name: 'Request Transformer Advanced',
    description: 'Use powerful regular expressions, variables and templates to transform API requests',
    group: PluginGroup.TRANSFORMATIONS,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE, PluginScope.CONSUMER, PluginScope.CONSUMER_GROUP],
  },
  'request-transformer': {
    name: 'Request Transformer',
    description: 'Modify the request before hitting the upstream server',
    group: PluginGroup.TRANSFORMATIONS,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE, PluginScope.CONSUMER, PluginScope.CONSUMER_GROUP],
  },
  'response-transformer': {
    name: 'Response Transformer',
    description: 'Modify the upstream response before returning it to the client',
    group: PluginGroup.TRANSFORMATIONS,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE, PluginScope.CONSUMER, PluginScope.CONSUMER_GROUP],
  },
  'route-transformer-advanced': {
    name: 'Route Transformer Advanced',
    description: 'Transforms the routing on the fly in Kong, changing the upstream server/port/path to hit',
    group: PluginGroup.TRANSFORMATIONS,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE, PluginScope.CONSUMER],
  },
  'kafka-upstream': {
    name: 'Kafka Upstream',
    description: 'Transform requests into Kafka messages in a topic',
    group: PluginGroup.TRANSFORMATIONS,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE, PluginScope.CONSUMER],
  },
  degraphql: {
    name: 'DeGraphQL',
    description: 'Transform a GraphQL upstream into a REST API',
    group: PluginGroup.TRANSFORMATIONS,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE],
  },
  'exit-transformer': {
    name: 'Exit Transformer',
    description: 'Customize Kong exit responses sent downstream',
    group: PluginGroup.TRANSFORMATIONS,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE, PluginScope.CONSUMER],
  },
  jq: {
    name: 'jq',
    description: 'Transform JSON objects included in API requests or responses using jq programs',
    group: PluginGroup.TRANSFORMATIONS,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE, PluginScope.CONSUMER],
  },
  'file-log': {
    name: 'File Log',
    description: 'Append request and response data to a log file on disk',
    group: PluginGroup.LOGGING,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE, PluginScope.CONSUMER],
  },
  'http-log': {
    name: 'HTTP Log',
    description: 'Send request and response logs to an HTTP server',
    group: PluginGroup.LOGGING,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE, PluginScope.CONSUMER],
  },
  loggly: {
    name: 'Loggly',
    description: 'Send request and response logs to Loggly',
    group: PluginGroup.LOGGING,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE, PluginScope.CONSUMER],
  },
  'statsd-advanced': {
    name: 'StatsD Advanced',
    description: 'Send traffic and Kong performance metrics to StatsD',
    group: PluginGroup.ANALYTICS_AND_MONITORING,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE, PluginScope.CONSUMER],
  },
  statsd: {
    name: 'StatsD',
    description: 'Send request and response logs to StatsD',
    group: PluginGroup.ANALYTICS_AND_MONITORING,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE, PluginScope.CONSUMER],
  },
  syslog: {
    name: 'Syslog',
    description: 'Send request and response logs to Syslog',
    group: PluginGroup.LOGGING,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE, PluginScope.CONSUMER],
  },
  'tcp-log': {
    name: 'TCP Log',
    description: 'Send request and response logs to a TCP server',
    group: PluginGroup.LOGGING,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE, PluginScope.CONSUMER],
  },
  'udp-log': {
    name: 'UDP Log',
    description: 'Send request and response logs to a UDP server',
    group: PluginGroup.LOGGING,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE, PluginScope.CONSUMER],
  },
  'kafka-log': {
    name: 'Kafka Log',
    description: 'Publish request and response logs to a Kafka topic',
    group: PluginGroup.LOGGING,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE, PluginScope.CONSUMER],
  },
  session: {
    name: 'Session',
    description: 'Sessions for Kong authentication',
    group: PluginGroup.AUTHENTICATION,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE],
  },
  'upstream-tls': {
    name: 'Upstream TLS',
    description: 'Enable TLS on upstream traffic by providing Kong with a list of trusted certificates.',
    group: PluginGroup.AUTHENTICATION,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE],
  },
  'application-registration': {
    name: 'Portal Application Registration',
    description: 'Allow portal developers to register applications against services',
    group: PluginGroup.AUTHENTICATION,
    scope: [PluginScope.SERVICE],
  },
  'konnect-application-auth': {
    name: 'Konnect Application Auth',
    description: 'Allow Konnect portal developers to register applications against services',
    group: PluginGroup.AUTHENTICATION,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE],
  },
  acme: {
    name: 'ACME',
    description: "Let's Encrypt and ACMEv2 integration with Kong",
    group: PluginGroup.SECURITY,
    scope: [PluginScope.GLOBAL],
  },
  'grpc-gateway': {
    name: 'gRPC Gateway',
    description: 'Access gRPC services through HTTP REST',
    group: PluginGroup.TRANSFORMATIONS,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE, PluginScope.CONSUMER],
  },
  'grpc-web': {
    name: 'gRPC Web',
    description: 'Allow browser clients to call gRPC services',
    group: PluginGroup.TRANSFORMATIONS,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE, PluginScope.CONSUMER],
  },
  'upstream-timeout': {
    name: 'Upstream Timeout',
    description: 'Configure read, send and connect timeouts to an upstream',
    group: PluginGroup.TRAFFIC_CONTROL,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE, PluginScope.CONSUMER],
  },
  opentelemetry: {
    name: 'OpenTelemetry',
    description: 'Propagate distributed tracing spans and report low-level spans to a OTLP-compatible server',
    group: PluginGroup.ANALYTICS_AND_MONITORING,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE, PluginScope.CONSUMER],
  },
  'websocket-validator': {
    name: 'WebSocket Validator',
    description: 'Validate individual WebSocket messages against to a user-specified schema before proxying them',
    group: PluginGroup.TRAFFIC_CONTROL,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE, PluginScope.CONSUMER],
  },
  'websocket-size-limit': {
    name: 'WebSocket Size Limit',
    description: 'Allows operators to specify a maximum size for incoming WebSocket messages',
    group: PluginGroup.TRAFFIC_CONTROL,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE, PluginScope.CONSUMER],
  },
  'tls-metadata-headers': {
    name: 'TLS Metadata Headers',
    description: 'Detects client certificates in requests, retrieves the TLS metadata, and proxies this metadata via HTTP headers',
    group: PluginGroup.SECURITY,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE],
  },
  'tls-handshake-modifier': {
    name: 'TLS Handshake Modifier',
    description: 'Requests the client certificate and if it exists, makes it available to other plugins acting on the request',
    group: PluginGroup.SECURITY,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE],
  },
  'oas-validation': {
    name: 'OAS Validation',
    description: 'Validate HTTP requests and responses based on an API Specification.',
    group: PluginGroup.TRAFFIC_CONTROL,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE, PluginScope.CONSUMER],
  },
  'jwe-decrypt': {
    name: 'Kong JWE Decrypt',
    description: 'The Kong JWE Decrypt plugin makes it possible to decrypt an inbound token(JWE) in a request.',
    group: PluginGroup.AUTHENTICATION,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE],
  },
  'xml-threat-protection': {
    name: 'XML Threat Protection',
    description: 'Reduce the risk of XML attacks by checking the structure of XML payloads.',
    group: PluginGroup.TRAFFIC_CONTROL,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE, PluginScope.CONSUMER],
  },
  saml: {
    name: 'SAML',
    description: 'Security Assertion Markup Language (SAML) is an open standard for exchanging authentication and authorization data between an identity provider and a service provider.',
    group: PluginGroup.SECURITY,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE],
  },
  'app-dynamics': {
    name: 'AppDynamics',
    description: 'This plugin integrates Kong with the AppDynamics APM platform so that proxy requests handled by Kong can be identified and analyzed in AppDynamics.',
    group: PluginGroup.ANALYTICS_AND_MONITORING,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE, PluginScope.CONSUMER],
  },
  'json-threat-protection': {
    name: 'JSON Threat Protection',
    description: 'Apply size checks on JSON payload and minimize risk of content-level attacks',
    group: PluginGroup.SECURITY,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE],
  },
  'standard-webhooks': {
    name: 'Standard Webhooks',
    description: 'Validate incoming webhooks adhere to the Standard Webhooks specification, to which Kong is a contributor',
    group: PluginGroup.TRAFFIC_CONTROL,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE],
  },
  'ai-proxy-advanced': {
    name: 'AI Proxy Advanced',
    description: 'Route across different LLMs and models using advanced load balancing algorithms, including semantic routing.',
    group: PluginGroup.AI,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE, PluginScope.CONSUMER, PluginScope.CONSUMER_GROUP],
  },
  'ai-semantic-cache': {
    name: 'AI Semantic Cache',
    description: 'Semantically cache AI requests to any LLM to reduce latency, improve end-user experiences and optimize GenAI costs.',
    group: PluginGroup.AI,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE, PluginScope.CONSUMER, PluginScope.CONSUMER_GROUP],
  },
  'ai-semantic-prompt-guard': {
    name: 'AI Semantic Prompt Guard',
    description: 'Semantically and intelligently create allow and deny lists of topics that can be requested across every LLM.',
    group: PluginGroup.AI,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE, PluginScope.CONSUMER, PluginScope.CONSUMER_GROUP],
  },
  'header-cert-auth': {
    name: 'Header Certificate Authentication',
    description: 'Authenticate clients with MTLS certificate passed in header by a WAF or load balancer',
    group: PluginGroup.AUTHENTICATION,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE],
  },
  'upstream-oauth': {
    name: 'Upstream OAuth',
    description: 'Configure Kong to obtain a OAuth2 token to consume an upstream API',
    group: PluginGroup.AUTHENTICATION,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE, PluginScope.CONSUMER, PluginScope.CONSUMER_GROUP],
  },
  confluent: {
    name: 'Confluent',
    description: 'Streamlines integration with Confluent Cloud and transforms requests into messages published to a Confluent topic.',
    group: PluginGroup.TRANSFORMATIONS,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE, PluginScope.CONSUMER],
  },
  'service-protection': {
    name: 'Service Protection',
    description: 'Prevent abuse and protect services with absolute limits on the number of requests reaching the service.',
    group: PluginGroup.TRAFFIC_CONTROL,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE],
  },
  'injection-protection': {
    name: 'Injection Protection',
    description: 'Protect against injection attacks by rejecting requests that match common injections patterns.',
    group: PluginGroup.SECURITY,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE],
  },
  redirect: {
    name: 'Redirect',
    description: 'Redirect incoming requests to a new URL',
    group: PluginGroup.TRAFFIC_CONTROL,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE, PluginScope.CONSUMER, PluginScope.CONSUMER_GROUP],
  },
  'kafka-consume': {
    name: 'Kafka Consume',
    description: 'Consume messages from Kafka topics over HTTP protocols.',
    group: PluginGroup.TRAFFIC_CONTROL,
    scope: [PluginScope.GLOBAL, PluginScope.ROUTE, PluginScope.CONSUMER],
  },
  'confluent-consume': {
    name: 'Confluent Consume',
    description: 'Consume messages from Confluent Kafka topics over HTTP protocols',
    group: PluginGroup.TRANSFORMATIONS,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE, PluginScope.CONSUMER],
  },
  'request-callout': {
    name: 'Request Callout',
    description: 'Callout to third party APIs as part of request processing.',
    group: PluginGroup.TRANSFORMATIONS,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE, PluginScope.CONSUMER, PluginScope.CONSUMER_GROUP],
  },
  'ai-sanitizer': {
    name: 'AI Sanitizer',
    description: 'Sanitize personal or sensitive information from prompts before sending to LLM.',
    group: PluginGroup.AI,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE, PluginScope.CONSUMER, PluginScope.CONSUMER_GROUP],
  },
  'ai-rag-injector': {
    name: 'AI RAG Injector',
    description: 'Attach contextual knowledge from vector databases with flexible template to LLM prompts.',
    group: PluginGroup.AI,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE, PluginScope.CONSUMER, PluginScope.CONSUMER_GROUP],
  },
  datakit: {
    name: 'Datakit',
    description: 'Datakit is a workflow engine for working with external APIs.',
    group: PluginGroup.TRANSFORMATIONS,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE],
  },
  'ai-prompt-compressor': {
    name: 'AI Prompt Compressor',
    description: 'The AI Prompt Compressor reduces costs associated with LLMs by compressing prompts.',
    group: PluginGroup.AI,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE, PluginScope.CONSUMER, PluginScope.CONSUMER_GROUP],
  },
  'solace-upstream': {
    name: 'Solace Upstream',
    description: 'Transform requests into Solace messages in a Solace queue or topic.',
    group: PluginGroup.TRANSFORMATIONS,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE],
  },
  'ai-aws-guardrails': {
    name: 'AI AWS GuardRails',
    description: 'The AI AWS GuardRails enables enforcement of introspection with the AWS GuardRails service for all requests processed by the AI Proxy plugin.',
    group: PluginGroup.AI,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE, PluginScope.CONSUMER, PluginScope.CONSUMER_GROUP],
  },
  ace: {
    name: 'Konnect Access Control Enforcement',
    description: 'Enable Developer Self-Service for Konnect Dev Portals.',
    group: PluginGroup.AUTHENTICATION,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE],
  },
  'solace-consume': {
    name: 'Solace Consume',
    description: 'Consume messages from Solace and make them available through HTTP endpoints.',
    group: PluginGroup.TRAFFIC_CONTROL,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE],
  },
  'solace-log': {
    name: 'Solace Log',
    description: 'Publish request and response logs to a Solace topic.',
    group: PluginGroup.LOGGING,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE],
  },
  'ai-llm-as-judge': {
    name: 'AI LLM Judge',
    description: 'Evaluate LLM responses with an external LLM service and use accuracy scores to drive dynamic load balancing for `llm/v1/chat` requests.',
    group: PluginGroup.AI,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE, PluginScope.CONSUMER, PluginScope.CONSUMER_GROUP],
  },
  'ai-mcp-proxy': {
    name: 'AI MCP Proxy',
    description: 'Convert APIs into MCP tools, proxy MCP servers, expose multiple MCP tools, and observe MCP traffic in real time.',
    group: PluginGroup.AI,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE],
  },
  'ai-gcp-model-armor': {
    name: 'AI GCP Model Armor ',
    description: 'Audit and validate AI Proxy messages with Google Cloud Model Armor before forwarding them to an upstream LLM.',
    group: PluginGroup.AI,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE, PluginScope.CONSUMER, PluginScope.CONSUMER_GROUP],
  },
  'ai-mcp-oauth2': {
    name: 'AI MCP OAuth2',
    description: 'Secure MCP server access with OAuth2 authentication.',
    group: PluginGroup.AI,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE],
  },
  'ai-semantic-response-guard': {
    name: 'AI Semantic Response Guard',
    description: 'Permit or block prompts based on semantic similarity to known LLM responses, preventing misuse of `llm/v1/chat` or `llm/v1/completions` requests.',
    group: PluginGroup.AI,
    scope: [PluginScope.GLOBAL, PluginScope.SERVICE, PluginScope.ROUTE, PluginScope.CONSUMER, PluginScope.CONSUMER_GROUP],
  },
} satisfies Record<string, {
  name: string
  description: string
  group: PluginGroup
  scope: PluginScope[]
}>

export type PluginName = keyof typeof PLUGIN_GROUP_AND_SCOPE_MAP

export * from './types'
